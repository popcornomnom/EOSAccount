//
//  ConsumptionViewModel.swift
//  EOSAccount
//
//  Created by Marharyta Lytvynenko on 17.11.2019.
//  Copyright (c) 2019 Marharyta Lytvynenko. All rights reserved.
//
//  This file was generated by http://www.popcornomnom.com
//

import Foundation

import Domain

protocol ConsumptionViewModelType: class {
    var staked: Binder<String?> { get }
    var usage: Binder<String?> { get }
    var percentage: Binder<String?> { get }
    var progress: Binder<Double> { get }
}

class ConsumptionViewModel: ConsumptionViewModelType {
    
    // MARK: - Properties
    
    // MARK: Private
    
    private let data: Domain.Сonsumption
    private let stakedValue: Double?
    
    // MARK: Public

    var staked: Binder<String?> {
        guard let staked = stakedValue else { return Binder(value: nil) }
        return Binder(value: String(format: "Staked: %.1f", staked))
    }
    var usage: Binder<String?> {
        let value = String(format: "%.1f/%.1f %@", data.used, data.total,
                           data.type.rawValue)
        return Binder(value: value)
    }
    var percentage: Binder<String?> {
        return Binder(value: "\(data.usagePercentage)%")
    }
    var progress: Binder<Double> {
        return Binder(value: Double(data.usagePercentage) / 100)
    }
    
    // MARK: Lifecycle
    
    init?(_ data: Domain.Сonsumption?, staked: Double?) {
        guard let data = data else { return nil }
        self.data = data
        self.stakedValue = staked
    }
}

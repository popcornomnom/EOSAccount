//
//  Repository.swift
//  NetworkData
//
//  Created by Marharyta Lytvynenko on 17.11.2019.
//  Copyright (c) 2019 Marharyta Lytvynenko. All rights reserved.
//
//  This file was generated by http://www.popcornomnom.com
//

import Foundation

final class Repository: ApiRepository {
    
    //MARK: - Properties
    //MARK: Private
    
    private let url: String
    private let defaultParams: [String: String]
    
    //MARK: Public

    typealias Callback<T> = (T?, Error?)->Void
    
    //MARK: - Lifecycle
    
    init(url: String, defaultParams: [String: String]) {
        self.url = url
        self.defaultParams = defaultParams
    }
    
    //MARK: - ApiRepository

    func item<Response: Decodable>(_ endpoint: EndpointType,
                                   _ parameters: [String : String]?,
                                   _ callback: @escaping Callback<Response>) {
        query(endpoint: endpoint, parameters: parameters, callback: callback)
    }
    
    func items<Response: Decodable>(_ endpoint: EndpointType,
                                    _ parameters: [String : String]?,
                                    _ callback: @escaping Callback<[Response]>) {
        query(endpoint: endpoint, parameters: parameters, callback: callback)
    }
    
    private func query<T: Decodable>(endpoint: EndpointType,
                                     parameters: [String : String]?,
                                     callback: @escaping Callback<T>) {
        
        let finalUrl = "\(url)\(endpoint.rawValue)"
        let parameters = self.defaultParams + parameters
        guard let url = URL(string: finalUrl) else {
            callback(nil, ApiError.incorrectRequest)
            return
        }

        #if DEBUG
        print("""
            API GET: \n \(finalUrl)/\(parameters
            .map { "\($0.key)=\($0.value)" }
            .joined(separator: "&"))
            """)
        #endif
        
        var request = URLRequest(url: url)
        request.httpMethod = endpoint.method.rawValue
        if let jsonData = parameters.jsonData {
            request.httpBody = jsonData
        }
        
        let session = URLSession.shared
        let task = session.dataTask(with: request as URLRequest) { data, response, error in
            guard let data = data else {
                callback(nil, error)
                return
            }
            do {
                //try? JSONSerialization.jsonObject(with: data!, options: [])
                let decoder = JSONDecoder()
//                decoder.keyDecodingStrategy = .convertFromSnakeCase
                let result = try decoder.decode(T.self, from: data)
                callback(result, nil)
            } catch let error {
                callback(nil, error)
            }
        }
        task.resume()
    }
}

private extension Dictionary {
    
    static func +=(lhs: inout [Key:Value], rhs: [Key:Value]?) {
        guard let rhs = rhs else { return }
        lhs.merge(rhs) { $1 }
    }
    static func +(lhs: [Key:Value], rhs: [Key:Value]?) -> [Key:Value] {
        guard let rhs = rhs else { return lhs }
        return lhs.merging(rhs) { $1 }
    }
}

private extension Dictionary where Key: Encodable, Value: Encodable {

    var jsonData: Data? {
        guard !isEmpty else { return nil }
        return try? JSONEncoder().encode(self)
    }
}
